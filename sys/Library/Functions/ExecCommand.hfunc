#!/bin/bash

function execCommand() {
	export SEARCHPATHS="/System:/System/core"
	
	command="$1"

	# Update path
	SEARCHPATHS2="$(regread "SYSTEM/Path")"
	if [[ ! -z "$SEARCHPATHS2" ]] && [[ "$SEARCHPATHS2" != "null" ]] && [[ "$SEARCHPATHS2" != "default" ]] && [[ "$SEARCHPATHS2" != "null" ]]; then
		export SEARCHPATHS="$SEARCHPATHS2"
	else
		regwrite "SYSTEM/Path" "$SEARCHPATHS" > /dev/null
	fi

	sys_log "interface" "Received input: $command"
	export args=($command)
	echo "${args[0]}" > "$CACHE/process"
	if [[ "${args[0]}" == "../"* ]]; then
		echo -e "$ESCAPE_NOT_ALLOWED"
		sys_log "interface" "Escape detected."
	elif [[ "${args[0]}" == "cd" ]]; then
		if [[ -z "${args[1]}" ]]; then
			echo "${MISSING_PARAM}Directory to enter"
		else
			if [[ -d "./${args[1]}" ]]; then
				if [[ "$(access_fs "./${args[1]}")" -ne "-9" ]]; then
					export ppw="$PWD"
					cd "./${args[1]}"
					if [[ "$PWD" == "$ROOTFS" ]]; then
						echo "${ACCESS_DENIED}Unaccessible location."
						cd "$ppw"
					fi
				else
					echo "${ACCESS_DENIED}Unaccessible location."
				fi
			else
				echo "No such directory: ${args[1]}"
			fi
		fi
	# elif [[ -f "$SYSTEM/bin/${args[0]}" ]]; then
	# 	if [[ "${args[0]}" == "lec" ]]; then
	# 		echo -n ""
	# 	else
	# 		export lastExecutedCommand="$command"
	# 		if [[ "${args[0]}" == "sudo" ]]; then
	# 			echo "${args[1]}" > "$CACHE/process"
	# 		else
	# 			echo "${args[0]}" > "$CACHE/process"
	# 		fi
	# 	fi
	# 	command_args=("${args[@]}")
	# 	"${SYSTEM}/bin/${command_args[@]}"
	elif [[ "$command" == "switch_to_liteos" ]]; then
		switch_to_liteos
	elif [[ -z "$command" ]]; then
		echo -n ""
	else
		# Split by :
		IFS=':' read -ra ListOfPath <<< "$SEARCHPATHS"
		FOUND=0
		for pth in "${ListOfPath[@]}"; do
			pth="$ROOTFS$pth"
			if [[ ! -d "$pth/bin" ]]; then
				continue
			fi
			if [[ -f "$pth/bin/${args[0]}" ]]; then
				export lastExecutedCommand="$command"
				echo "${args[0]}" > "$CACHE/process"
				command_args=("${args[@]}")
				"$pth/bin/${command_args[@]}"
				FOUND=1
			fi
		done

		if [[ "$FOUND" -eq "0" ]]; then
			echo "${COMMAND_NOT_FOUND}${args[0]}"
		fi
	fi
	if [[ -f "$CACHE/stdown" ]]; then
		sys_log "interface" "Shutdown signal received."
		sys_log "interface" "Flushing cache data..."
		verbose "$FLUSHING_CACHE_DATA"
		rm -rf "$CACHE"
		exit 0
	elif [[ -f "$CACHE/rboot" ]]; then
		sys_log "interface" "Reboot signal received."
		sys_log "interface" "Flushing cache data..."
		verbose "$FLUSHING_CACHE_DATA"
		rm -rf "$CACHE"
		exit 100
	elif [[ -f "$CACHE/uirestart" ]]; then
		sys_log "interface" "Restarting interface!"
		rm -f "$CACHE/uirestart"
		exit 101
	elif [[ -f "$CACHE/defreload" ]]; then
		sys_log "interface" "Reloading memory links..."
		echo "$RELOAD_WARNING"
		loadDefinition
	fi
}

export -f execCommand