#!/bin/bash
function OSSTART() {
	export BOOTARGS="${BOOTARGS} $@"
	export SYSNAME="LiteOS"
	export SYSVERS="1.3"
	export SYSLOC="$SYSTEM/boot/bootloader/liteos"
	export SYSCAC="$CACHE"

	verbose "Loading $SYSNAME: $SYSNAME $SYSVERS"
	cd "$SYSLOC"
	while read DATAFILE
	do
		source "$SYSLOC/$DATAFILE"
	done <<< "$(ls -p | grep -v / | grep ".DATA")"
	verbose "$SYSNAME data is uploaded to memory."

	# If STARTUP.LSC exists in $ROOTFS, it will be executed.
	if [[ -f "$ROOTFS/STARTUP.LSC" ]]; then
		sys_log "boot" "STARTUP.LSC found. Running..."
		verbose "[${GREEN}*${C_DEFAULT}] STARTUP.LSC found. Running..."

		# Load the script into memory
		script_content="$(cat "$ROOTFS/STARTUP.LSC")"
		eval "$script_content"

		sys_log "boot" "STARTUP.LSC finished."
		verbose "[${GREEN}*${C_DEFAULT}] STARTUP.LSC finished."

		# Remove
		if [[ -f "$ROOTFS/STARTUP.LSC" ]]; then
			sys_log "boot" "Removing STARTUP.LSC..."
			verbose "[${GREEN}*${C_DEFAULT}] Removing STARTUP.LSC..."
			rm "$ROOTFS/STARTUP.LSC"
		fi
		unset script_content
	fi
	# PLSC: Persistent LiteScript
	if [[ -f "$ROOTFS/STARTUP.PLSC" ]]; then
		sys_log "boot" "STARTUP.PLSC found. Running..."
		verbose "[${GREEN}*${C_DEFAULT}] STARTUP.PLSC found. Running..."

		# Load the script into memory
		script_content="$(cat "$ROOTFS/STARTUP.PLSC")"
		eval "$script_content"

		sys_log "boot" "STARTUP.PLSC finished."
		verbose "[${GREEN}*${C_DEFAULT}] STARTUP.PLSC finished."
		unset script_content
	fi


	if [[ ! -z "$(FIRMWARE_INFO 2>/dev/null)" ]]; then
		verbose "Firmware information is detected."
		if [[ $(bootArgumentHas "no-firm-support") == "1" ]]; then
			verbose "Firmware support is disabled."

			if [[ "$(FIRMWARE_INFO unload)" == "1" ]]; then
				if [[ "$(FIRMWARE unload)" == "0" ]]; then
					verbose "Firmware is unloaded using provided function."
				else
					verbose "Failed to unload firmware. Using default method."
					unset -f FIRMWARE_INFO 2>/dev/null
					unset -f sysreset 2>/dev/null
				fi
			else
				verbose "Firmware does not support self-unloading. Using default method."
				unset -f FIRMWARE_INFO 2>/dev/null
				unset -f sysreset 2>/dev/null
			fi
			unset -f FIRMWARE 2>/dev/null
		else
			verbose "Firmware support is enabled."
			verbose "Firmware version: $(FIRMWARE_INFO version)"
			verbose "Firmware vendor: $(FIRMWARE_INFO vendor)"
		fi
	else
		verbose "Firmware information is not detected."
	fi

	if [[ -f "$NVRAM/boot-arguments" ]]; then
		export BOOTARGS="$BOOTARGS $(<"$NVRAM/boot-arguments")"
	fi

	if [[ $(bootArgumentHas "lite") == "1" ]]; then
		LITE_START
	else
		LITE_BOOT_SYSTEM
	fi
}

export -f OSSTART
export BOOT_LOADER="liteos"
