#!/bin/bash
function LITE_BOOT_SYSTEM() {
	LITE_CLEAR_BOOTSTAGE
	sys_log "boot" "System run signal received."

	if [[ -f "$NVRAM/boot_reference" ]]; then
		sys_log "boot" "Boot reference found. Reading..."
		verbose "Boot reference found. Reading..."
		mkdir -p "$CACHE"
		cp "$NVRAM/boot_reference" "$CACHE/bootconf"
		chmod +x "$CACHE/bootconf"
		source "$CACHE/bootconf"
		rm -f "$CACHE/bootconf"
	fi

	if [[ -f "$BOOTREFUSE" ]]; then
		sys_log "boot" "There was boot refuse flag."
		rm -f "$BOOTREFUSE"
		sys_log "boot" "Flag removed."
	fi


	export BOOTARGS="${BOOTARGS} $@"
	# if [[ -f "$NVRAM/boot-arguments" ]]; then
	# 	export BOOTARGS="$BOOTARGS $(<"$NVRAM/boot-arguments")"
	# fi
	sys_log "boot" "Boot arguments: $BOOTARGS"

	"$SYSTEM/boot/recovery"
	sys_log "boot" "Did not enter recovery."

	while [[ $(bootArgumentHas "recovery") == 0 ]]; do
		clear
		sys_log "boot" "Starting Hermes..."
		verbose "[${GREEN}*${C_DEFAULT}] Starting Hermes..."
		if [[ -f "$CORE/loader" ]]; then
			sys_log "boot" "Reading loader..."
			source "$CORE/loader"
			export endcode=$?
			if [[ -f "$BOOTREFUSE" ]]; then
				sys_log "boot" "Boot refused."
				echo -e "[${RED}-${C_DEFAULT}] Ending System."
				leaveSystem
				exit 0
			elif [[ $endcode -ne 0 ]]; then
				sys_log "boot" "System exception: ${endcode}"
				error "${RED}Core.osstart terminated with unexpected return code: ${endcode}${C_DEFAULT}"
				exit 0
			fi
		else
			sys_log "boot" "Unable to load core."
			error "${RED}Unable to load core. Aborting boot procedure.${C_DEFAULT}"
			exit 0
		fi
		sys_log "boot" "Starting UI..."
		"$CORE/uistart"
		EXITSIG="$?"

		# LiteOS will run given script from $ROOTFS/TERMINATE.LSC if it exists.
		# It must load the script to memory and run it.
		if [[ -f "$ROOTFS/TERMINATE.LSC" ]]; then
			sys_log "boot" "TERMINATE.LSC found. Running..."
			verbose "[${GREEN}*${C_DEFAULT}] TERMINATE.LSC found. Running..."

			# Load the script into memory
			script_content=$(cat "$ROOTFS/TERMINATE.LSC")
			eval "$script_content"

			sys_log "boot" "TERMINATE.LSC finished."
			verbose "[${GREEN}*${C_DEFAULT}] TERMINATE.LSC finished."

			# Remove the script from memory
			unset script_content
			if [[ -f "$ROOTFS/TERMINATE.LSC" ]]; then
				sys_log "boot" "Removing TERMINATE.LSC..."
				verbose "[${GREEN}*${C_DEFAULT}] Removing TERMINATE.LSC..."
				rm "$ROOTFS/TERMINATE.LSC"
			fi
		fi
		# PLSC: Persistent LiteScript
		if [[ -f "$ROOTFS/TERMINATE.PLSC" ]]; then
			sys_log "boot" "TERMINATE.PLSC found. Running..."
			verbose "[${GREEN}*${C_DEFAULT}] TERMINATE.PLSC found. Running..."

			# Load the script into memory
			script_content=$(cat "$ROOTFS/TERMINATE.PLSC")
			eval "$script_content"

			sys_log "boot" "TERMINATE.PLSC finished."
			verbose "[${GREEN}*${C_DEFAULT}] TERMINATE.PLSC finished."

			# Remove the script from memory
			unset script_content
		fi


		if [[ "$EXITSIG" == 0 ]]; then
			sys_log "boot" "Shutdown signal received..."
			break
		fi
		if [[ -f "$NVRAM/boot-arguments" ]]; then
			export BOOTARGS="$(<"$NVRAM/boot-arguments")"
		else
			export BOOTARGS=""
		fi
	done
}

export -f LITE_BOOT_SYSTEM